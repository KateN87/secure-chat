    messagesChannels.addEventListener('click', async () => {
        const channelBoxes = Array.from(channelsContainer.children);


        for (const box of channelBoxes) {
            box.classList.remove('selectedChannel');
        }


        messagesChannels.classList.add('selectedChannel');
        /* console.log("channelBoxes", channelBoxes) */

        let maybeAllowed = await checkChannelAuth(channelName);
        if (maybeAllowed) {
            containers.newMessageContainer.classList.remove('invisible');

            getMessages(channelName);
        } else {
            /* messagesChannels.innerHTML =
                '<p id="tooltip-text> Please login </p>"'; */
            console.log('Not allowed');
        }
    });


    /* buttons.btnLogin.addEventListener('click', async (event) => {
    let uName = inputs.inputUserName.value;
    let uPassword = inputs.inputPassword.value;
    if (uName === '' || uPassword === '') {
        return;
    }
    let maybeLoggedIn = await loginUser();
    if (!maybeLoggedIn) {
        forms.errorLogin.classList.remove('invisible');
        event.preventDefault();
    } else {
        localStorage.setItem(state.JWT_KEY, maybeLoggedIn.token);
        state.loggedInUser = { userName: `${maybeLoggedIn.userName}` };
        state.isLoggedIn = true;
        forms.errorLogin.classList.add('invisible');
        updateLoggedUI();
    }
}); */